{"version":3,"sources":["App.tsx","index.tsx"],"names":["SortType","goodsFromServer","App","React","useState","none","sortField","setSortField","reverseField","setReverseField","preparedGoods","goods","sort","good1","good2","alphabet","localeCompare","length","reverse","getPreparedGoods","className","type","cn","onClick","currentValue","map","good","ReactDOM","render","document","getElementById"],"mappings":"6KAKKA,E,6FAAAA,K,QAAAA,E,oBAAAA,E,iBAAAA,M,KAME,IAAMC,EAAkB,CAC7B,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,UAgCK,IAAMC,EAAgB,WAC3B,MAAkCC,IAAMC,SAAmBJ,EAASK,MAApE,mBAAOC,EAAP,KAAkBC,EAAlB,KACA,EAAwCJ,IAAMC,UAAS,GAAvD,mBAAOI,EAAP,KAAqBC,EAArB,KACMC,EAhCR,SACEC,EACAL,EACAE,GAEA,IAAME,EAAa,YAAOC,GAqB1B,OAnBIL,GACFI,EAAcE,MAAK,SAACC,EAAOC,GACzB,OAAQR,GACN,KAAKN,EAASe,SACZ,OAAOF,EAAMG,cAAcF,GAE7B,KAAKd,EAASiB,OACZ,OAAOJ,EAAMI,OAASH,EAAMG,OAE9B,QACE,OAAO,MAKXT,GACFE,EAAcQ,UAGTR,EAMeS,CACpBlB,EACAK,EACAE,GAOF,OACE,sBAAKY,UAAU,kBAAf,UACE,sBAAKA,UAAU,UAAf,UACE,wBACEC,KAAK,SACLD,UACEE,IAAG,SACD,UACA,CAAE,WAAYhB,IAAcN,EAASe,WAEzCQ,QAAS,kBAAMhB,EAAaP,EAASe,WAPvC,iCAYA,wBACEM,KAAK,SACLD,UACEE,IAAG,SACD,aACA,CAAE,WAAYhB,IAAcN,EAASiB,SAEzCM,QAAS,kBAAMhB,EAAaP,EAASiB,SAPvC,4BAYA,wBACEI,KAAK,SACLD,UACEE,IAAG,SACD,aACA,CAAE,YAAad,IAEnBe,QAAS,kBAAMd,GAAgB,SAAAe,GAAY,OAAKA,MAPlD,sBAYElB,GAAaE,IACb,wBACEa,KAAK,SACLD,UAAU,4BACVG,QAhDI,WACZhB,EAAaP,EAASK,MACtBI,GAAgB,IA2CV,sBAUJ,6BACGC,EAAce,KAAI,SAAAC,GAAI,OACrB,oBAAe,UAAQ,OAAvB,SAA+BA,GAAtBA,YCnHnBC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.35aafd08.chunk.js","sourcesContent":["import React from 'react';\nimport 'bulma/css/bulma.css';\nimport './App.scss';\nimport cn from 'classnames';\n\nenum SortType {\n  none = '',\n  alphabet = 'alphabet',\n  length = 'length',\n}\n\nexport const goodsFromServer = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\nfunction getPreparedGoods(\n  goods: string[],\n  sortField: SortType,\n  reverseField: boolean,\n) {\n  const preparedGoods = [...goods];\n\n  if (sortField) {\n    preparedGoods.sort((good1, good2) => {\n      switch (sortField) {\n        case SortType.alphabet:\n          return good1.localeCompare(good2);\n\n        case SortType.length:\n          return good1.length - good2.length;\n\n        default:\n          return 0;\n      }\n    });\n  }\n\n  if (reverseField) {\n    preparedGoods.reverse();\n  }\n\n  return preparedGoods;\n}\n\nexport const App: React.FC = () => {\n  const [sortField, setSortField] = React.useState<SortType>(SortType.none);\n  const [reverseField, setReverseField] = React.useState(false);\n  const preparedGoods = getPreparedGoods(\n    goodsFromServer,\n    sortField,\n    reverseField,\n  );\n  const reset = () => {\n    setSortField(SortType.none);\n    setReverseField(false);\n  };\n\n  return (\n    <div className=\"section content\">\n      <div className=\"buttons\">\n        <button\n          type=\"button\"\n          className={\n            cn('button',\n              'is-info',\n              { 'is-light': sortField !== SortType.alphabet })\n          }\n          onClick={() => setSortField(SortType.alphabet)}\n        >\n          Sort alphabetically\n        </button>\n\n        <button\n          type=\"button\"\n          className={\n            cn('button',\n              'is-success',\n              { 'is-light': sortField !== SortType.length })\n          }\n          onClick={() => setSortField(SortType.length)}\n        >\n          Sort by length\n        </button>\n\n        <button\n          type=\"button\"\n          className={\n            cn('button',\n              'is-warning',\n              { 'is-light': !reverseField })\n          }\n          onClick={() => setReverseField(currentValue => !currentValue)}\n        >\n          Reverse\n        </button>\n\n        {(sortField || reverseField) && (\n          <button\n            type=\"button\"\n            className=\"button is-danger is-light\"\n            onClick={reset}\n          >\n            Reset\n          </button>\n        )}\n      </div>\n\n      <ul>\n        {preparedGoods.map(good => (\n          <li key={good} data-cy=\"Good\">{good}</li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}